/* stylelint-disable selector-no-type, selector-no-combinator */
/**
 * @section Forms
 */

.fieldset,
.input,
.select > select,
.textarea {
  appearance: none;
  background: #fff;
  border: 0;
  margin: 0;
  padding: 0;
  box-shadow: none;
}

.input,
.textarea {
  transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  border: 1px solid var(--gray-light);
  border-radius: var(--border-radius);
  display: inline-block;
}

.input:focus,
.textarea:focus {
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.22);
  border: 1px solid var(--gray-light);
}

.input--no-shadow:focus,
.textarea--no-shadow:focus {
  box-shadow: none;
}

.input::placeholder {
  color: var(--gray-light);
}

/**
 * Text input. The following modifiers are available:
 * - `input--s`: Small
 * - `input--dark`: Dark
 * - `input--no-shadow`: No shadow on focus
 *
 * Use `w*` width classes to change widths.
 *
 * @memberof Forms
 * @example
 * <input class='input' placeholder='basic' />
 * <input class='input input--s input--no-shadow' placeholder='small' />
 * <input class='input input--dark' placeholder='dark' />
 */
.input {
  height: 40px;
  line-height: 38px; /* minus border */
  padding: 0 12px;
}

.input--s {
  height: 30px;
  line-height: 28px; /* minus border */
  padding: 0 10px;
  font-size: 12px;
}

/**
 * Textarea. The following modifiers are available:
 * - `textarea--s`: Small
 * - `textarea--dark`: Dark
 * - `textarea--no-shadow`: No shadow on focus
 *
 * Use `w*` width classes to change widths.
 *
 * @memberof Forms
 * @example
 * <textarea class='textarea'>basic</textarea>
 * <textarea class='textarea textarea--s textarea--no-shadow'>small</textarea>
 * <textarea class='textarea textarea--dark'>dark</textarea>
 */
.textarea {
  resize: vertical;
  padding-top: 8px; /* minus border to match input */
  padding-bottom: 8px;
  padding-left: 12px;
  padding-right: 12px;
}

.textarea--s {
  font-size: 12px; /* match input--s */
  padding-left: 10px;
  padding-right: 10px;
}

/* Dark */
.input--dark,
.textarea--dark {
  background-color: var(--gray-dark);
  color: #fff;
}

/**
 * The select markup must fit the following pattern.
 * - A wrapping `<div>` with the class `select`.
 * - A `<select>`.
 *
 * Use `w*` width classes to change widths.
 *
 * The default styling looks kind of like an input.
 *
 * Variations:
 * - Modify `.select` with `select--stroke`.
 * - Modify *non-stroke* `.select` with a `.bg-{color}` class.
 * - Modify *stroke* `.select` with a text color, e.g. `.color-red`.
 *
 * @section Selects
 * @memberof Forms
 */

/**
 * @memberof Selects
 * @example
 * <div class='select'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 * <div class='select bg-red'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 * <div class='select select--s bg-blue'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 * <div class='select select--stroke color-purple'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 */
.select {
  display: inline-block;
  position: relative;
  border-radius: var(--border-radius);
}

/* Borders are on the select, but colors are applied
to the `.select` container. */

.select > select {
  display: block;
  border-width: 2px;
  border-style: solid;
  border-color: var(--gray-light);
  border-radius: var(--border-radius);
  color: currentColor;
  font-size: 12px;
  font-weight: bold;
  cursor: pointer;
  height: 40px;
  line-height: 36px; /* minus border */
  padding: 0 30px 0 12px; /* plus arrow */
  /* Needs to be on top of everything but transparent */
  position: relative;
  z-index: 2;
  background: transparent;
  width: 100%;
}

/* IE overrides */
.select > select::-ms-expand { display: none; }
/* IE actually colors the options, so they can't be white */
.select option { color: var(--text-color); }
/* Remove purple highlight in HC mode */
@media all and (-ms-high-contrast: active) {
  .select > select:focus::-ms-value {
    background-color: transparent;
    color: inherit;
  }
}
/* Remove blue highlight in Normal mode */
@media all and (-ms-high-contrast: none) {
  .select > select:focus::-ms-value {
    background-color: transparent;
    color: inherit;
  }
}
/* End IE overrides */

.select--stroke > select {
  border-color: currentColor;
}

.select--s > select {
  height: 30px;
  line-height: 26px; /* minus border */
  padding: 0 40px 0 10px; /* plus arrow */
}

.select::after {
  content: '';
  border-left: 4px solid transparent;
  border-right: 4px solid transparent;
  border-top: 6px solid var(--gray-light);
  width: 8px;
  height: 8px;
  font-size: 0;
  line-height: 0;
  position: absolute;
  top: 50%;
  margin-top: -3px;
  right: 10px;
}

.select--stroke::after {
  border-top-color: currentColor;
}

.select--s > select {
  padding-right: 26px;
}

.select--s::after {
  right: 8px;
}

/* stylelint-disable selector-no-attribute */
/* bg- colors */
.select[class*='bg-']:not(.select--stroke),
.select[class*='bg-']:not(.select--stroke) > select {
  border-color: transparent;
  color: #fff;
}
.select[class*='bg-']:not(.select--stroke)::after {
  border-top-color: #fff;
}
/* stylelint-enable selector-no-attribute */

/* Color variations */
.select.bg-gray:hover { background-color: var(--gray-dark) !important; }
.select--stroke.color-gray:hover { color: var(--gray-dark) !important; }

.select.bg-pink:hover { background-color: var(--pink-dark) !important; }
.select--stroke.color-pink:hover { color: var(--pink-dark) !important; }

.select.bg-red:hover { background-color: var(--red-dark) !important; }
.select--stroke.color-red:hover { color: var(--red-dark) !important; }

.select.bg-orange:hover { background-color: var(--orange-dark) !important; }
.select--stroke.color-orange:hover { color: var(--orange-dark) !important; }

.select.bg-yellow:hover { background-color: var(--yellow-dark) !important; }
.select--stroke.color-yellow:hover { color: var(--yellow-dark) !important; }

.select.bg-green:hover { background-color: var(--green-dark) !important; }
.select--stroke.color-green:hover { color: var(--green-dark) !important; }

.select.bg-teal:hover { background-color: var(--teal-dark) !important; }
.select--stroke.color-teal:hover { color: var(--teal-dark) !important; }

.select.bg-blue:hover { background-color: var(--blue-dark) !important; }
.select--stroke.color-blue:hover { color: var(--blue-dark) !important; }

.select.bg-purple:hover { background-color: var(--purple-dark) !important; }
.select--stroke.color-purple:hover { color: var(--purple-dark) !important; }

/* Ranges */
.range {
  appearance: none;
  padding: 5px 0; /* to increase click area for ranges */
  width: 100%;
  vertical-align: middle;
  background: transparent;
}

/* range track */
.range::-webkit-slider-runnable-track {
  width: 100%;
  height: 3px;
  padding: 0;
  border: 0;
  border-radius: 2px;
  background: var(--gray-light);
  vertical-align: middle;
  cursor: pointer;
  box-shadow: 0;
}

.range::-moz-range-track {
  width: 100%;
  height: 3px;
  padding: 0;
  border: 0;
  border-radius: 2px;
  background: var(--gray-light);
  vertical-align: middle;
  cursor: pointer;
  box-shadow: 0;
}

.range::-ms-track { /* use fill-lower + fill-upper to set color */
  width: 100%;
  height: 3px;
  cursor: pointer;
  background: transparent;
  border-color: transparent;
  border-width: 8px 0;
  color: transparent;
}

.range::-ms-fill-lower {
  background: var(--gray-light);
  border: 0;
  box-shadow: 0;
}

.range::-ms-fill-upper {
  background: var(--gray-light);
  border: 0;
  box-shadow: 0;
}

/* range track:hover */
.range:hover::-webkit-slider-runnable-track { background: var(--blue); }
.range:hover::-moz-range-track { background: var(--blue); }
.range:hover::-ms-fill-upper { background: var(--blue); }
.range:hover::-ms-fill-lower { background: var(--blue); }

/* range thumb */
.range::-webkit-slider-thumb {
  appearance: none;
  box-shadow: none;
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: var(--gray-light);
  border: 0;
  cursor: pointer;
  margin-top: -7.5px;
}

.range::-moz-range-thumb {
  width: 13px;
  height: 13px;
  border-radius: 50%;
  background: var(--gray-light);
  border: 0;
  cursor: pointer;
  margin-top: -7.5px;
}

.range::-ms-thumb {
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: var(--gray-light);
  border: 0;
  cursor: pointer;
}

/* range thumb:hover */
.range:hover::-webkit-slider-thumb { transform: scale(1.25); background: var(--blue); }
.range:hover::-ms-thumb { transform: scale(1.25); background: var(--blue); }
.range:hover::-moz-range-thumb { transform: scale(1.25); background: var(--blue); }

/* range small */
/* range small track */
.range--s::-webkit-slider-runnable-track { height: 2px; }
.range--s::-moz-range-track { height: 2px; }
.range--s::-ms-track { height: 2px; border-width: 7px 0; }

/* range small thumb */
.range--s::-webkit-slider-thumb {
  width: 13px;
  height: 13px;
  margin-top: -5px;
}

.range--s::-ms-thumb {
  width: 13px;
  height: 13px;
  margin-top: -1px;
}

.range--s::-moz-range-thumb {
  width: 11px;
  height: 11px;
}

/* range dark */
/* range dark track */
.range--dark::-webkit-slider-runnable-track { background: var(--gray); }
.range--dark::-moz-range-track { background: var(--gray); }
.range--dark::-ms-fill-lower { background: var(--gray); }
.range--dark::-ms-fill-upper { background: var(--gray); }

/* range dark thumb */
.range--dark::-webkit-slider-thumb { background: var(--gray); }
.range--dark::-ms-thumb { background: var(--gray); }
.range--dark::-moz-range-thumb { background: var(--gray); }

/* range dark thumb:hover */
.range--dark:hover::-webkit-slider-thumb { background: var(--gray-light); }
.range--dark:hover::-ms-thumb { background: var(--gray-light); }
.range--dark:hover::-moz-range-thumb { background: var(--gray-light); }

/* range dark track:hover */
.range--dark:hover::-webkit-slider-runnable-track { background: var(--gray-light); }
.range--dark:hover::-moz-range-track { background: var(--gray-light); }
.range--dark:hover::-ms-fill-lower { background: var(--gray-light); }
.range--dark:hover::-ms-fill-upper { background: var(--gray-light); }

/* range blue - example */
/* range blue track */
.range--blue::-webkit-slider-runnable-track { background: var(--blue); }
.range--blue::-moz-range-track { background: var(--blue); }
.range--blue::-ms-fill-lower { background: var(--blue); }
.range--blue::-ms-fill-upper { background: var(--blue); }

/* range blue thumb */
.range--blue::-webkit-slider-thumb { background: var(--blue); }
.range--blue::-ms-thumb { background: var(--blue); }
.range--blue::-moz-range-thumb { background: var(--blue); }

/* range blue track:hover */
.range--blue:hover::-webkit-slider-runnable-track { background: var(--blue-light); }
.range--blue:hover::-moz-range-track { background: var(--blue-light); }
.range--blue:hover::-ms-fill-lower { background: var(--blue-light); }
.range--blue:hover::-ms-fill-upper { background: var(--blue-light); }

/* range blue thumb:hover */
.range--blue:hover::-webkit-slider-thumb { background: var(--blue-light); }
.range--blue:hover::-ms-thumb { background: var(--blue-light); }
.range--blue:hover::-moz-range-thumb { background: var(--blue-light); }

/**
 * The checkbox markup must fit the following pattern.
 * - A wrapping `<label>` with the class `checkbox-container`.
 * - An `<input type='checkbox'>`.
 * - A `<div>` with the class `checkbox`
 *   containing an `<svg>` with the chosen icon.
 * - Text for the label.
 *
 * Variations:
 * - Modify `checkbox` with `checkbox--stroke`.
 * - Modify *non-stroke* `checkbox` with a background color,
 *   e.g. `bg-red`.
 * - Modify *stroke* `checkbox` with a text color, e.g. `color-red`.
 * - Use a different icon.
 * - Modify `checkbox` with `checkbox--s-label` if the text is small,
 *   for proper vertical alignment.
 *
 * When placing a checkbox inside a *non-stroke* `.btn`, you should always
 * use `checkbox--stroke`. The checkbox's border will be removed,
 * but the box will be white and the checkmark will be colored as you choose.
 * Inside a `.btn--stroke`, anything goes.
 *
 * The class `checkbox` and its modifiers can also be used independent
 * of a `<label>` and `<input>` if you are building a custom components.
 * In that case, apply the state class `is-active` when it should be checked.
 *
 * @section Checkboxes
 * @memberof Forms
 */

/*
 * @memberof Checkboxes
 * @example
 * <div class='mb10'>
 *   <label class='checkbox-container'>
 *     <input type='checkbox' value='magic'>
 *     <div class='checkbox'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     Checkbox magic
 *   </label>
 * </div>
 * <div class='txt-s'>
 *   <label class='checkbox-container mr10'>
 *     <input type='checkbox' value='magic'>
 *     <div class='checkbox checkbox--stroke checkbox--s-label color-red'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     Checkbox magic
 *   </label>
 * </div>
 * <div class='mb10'>
 *   <label class='checkbox-container mr10'>
 *     <input type='checkbox' value='magic'>
 *     <div class='checkbox'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci tenetur distinctio provident a, debitis obcaecati ipsam laborum autem suscipit natus repellendus nam cumque ab qui ducimus unde ratione, quisquam nisi.
 *   </label>
 * </div>
 */

/**
 * The radio markup must fit the following pattern.
 * - A wrapping `<label>` with the class `radio-container`.
 * - An `<input type='radio'>`.
 * - A `<div>` with the class `radio`.
 * - Text for the label.
 *
 * Variations:
 * - Modify `radio` with a text color, e.g. `color-purple`.
 * - Modify `radio` with `radio--s-label` if the text is small,
 *   for proper vertical alignment.
 *
 * The class `radio` and its modifiers can also be used independent
 * of a `<label>` and `<input>` if you are building a custom components.
 * In that case, apply the state class `is-active` when it should be checked.
 *
 * @section Radio buttons
 */

/**
 * @memberof Radio buttons
 * @example
 * <div class='mb10'>
 *   <label class='radio-container mr10'>
 *     <input name='radio-basic' value='magic' type='radio'>
 *     <div class='radio'></div>
 *     Magic radio
 *   </label>
 * </div>
 * <div class='txt-s'>
 *   <label class='radio-container mr10'>
 *     <input name='radio-basic' value='magic' type='radio'>
 *     <div class='radio radio--s-label color-yellow'></div>
 *     Magic radio
 *   </label>
 * </div>
 */

/**
 * The switch markup must fit the following pattern.
 *
 * Consists of
 * - A wrapping `<label>` with the class `switch-container`.
 * - An `<input type='checkbox'>`.
 * - A `<div>` with the class `switch`.
 *
 * Variations:
 * - Modify the active state of the switch handle with `switch--handle-{color}`.
 * - Modify the color of the dot when inactive, the border when inactive and the background in active state with `color--{color}`
 *
 * The class `switch` and its modifiers can also be used independent
 * of a `<label>` and `<input>` if you are building a custom components.
 * In that case, apply the state class `is-active` when it should be checked.
 *
 * @section Switches
 */

/**
 * @memberof Switches
 * @example
 * <label class="switch-container mr10">
 *   <input type='checkbox' value='magic'>
 *   <div class="switch">
 *   </div>
 * </label>
 * <label class="switch-container">
 *   <input type='checkbox' value='magic'>
 *   <div class='switch border--pink color-gray'>
 *   </div>
 * </label>
 */

/* shared form styles */
.checkbox-container,
.switch-container,
.radio-container {
  user-select: none;
  display: inline-flex;
  cursor: pointer;
}

.checkbox-container > input,
.switch-container > input,
.radio-container > input {
  position: absolute;
  left: -9999px;
}

.checkbox,
.radio {
  flex-shrink: 0;
  width: 20px;
  height: 20px;
  border-radius: var(--border-radius);
  cursor: pointer;
  position: relative;
  top: 2px;
  border-width: 2px;
  border-style: solid;
  border-color: transparent;
}

/* Primary checkbox styles */
.checkbox {
  background-color: var(--blue);
  color: #fff;
}

.checkbox--stroke {
  background-color: #fff;
  border-color: currentColor;
  color: var(--blue);
}

/* Unchecked state */
.checkbox > .icon {
  display: none;
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
}

/* Ensure checkboxes inside buttons look nice */
.btn:not(.btn--stroke) > .checkbox--stroke {
  border-color: transparent;
}

/* Primary radio styles */
.radio {
  border-radius: 50%;
  color: var(--blue);
  border-color: currentColor;
}

.radio::before {
  content: '';
  background-color: currentColor;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -5px;
  margin-left: -5px;
  display: none;
}

/* Primary switch styles */
.switch {
  position: relative;
  top: 2px;
  flex-shrink: 0;
  width: 36px;
  height: 20px;
  border-radius: 10px;
  cursor: pointer;
  border-width: 2px;
  border-style: solid;
  border-color: currentColor;
  color: var(--blue);
  transition: color 0.125s, background-color 0.125s, border-color 0.125s;
}

.switch::after {
  background-color: currentColor;
  position: relative;
  display: block;
  content: '';
  border-radius: 50%;
  width: 12px;
  height: 12px;
  left: 2px;
  top: 2px;
  transition: left 0.125s, background-color 0.125s;
}

/* align labels with small text */
.switch--s-label,
.checkbox--s-label,
.radio--s-label {
  top: 0;
}

/* State management for checkboxes and radio inputs */
input:checked + .checkbox > .icon,
.checkbox.is-active > .icon {
  display: block;
}
input:checked + .radio::before,
.radio.is-active::before {
  display: block;
}

input:checked .checkbox:not(.checkbox--stroke),
.checkbox.is-active:not(.checkbox--stroke) {
  background-color: var(--blue-dark);
}
input:checked + .checkbox--stroke,
.checkbox--stroke.is-active,
input:checked + .radio,
.radio.is-active {
  color: var(--blue-dark);
}

/* state management for switches */
input:not(:checked) + .switch:not(.is-active):hover::after {
  background-color: var(--blue-dark);
}

.switch:hover {
  color: var(--blue-dark);
}

.is-active.switch::after,
input:checked + .switch::after {
  left: 18px;
  background-color: #fff;
}

.is-active.switch,
input:checked + .switch {
  border-color: transparent !important;
  background-color: var(--blue-dark) !important;
}

/* Color variations for checkboxes */
input:checked + .bg-gray-faint:not(.checkbox--stroke),
.bg-gray-faint.is-active:not(.checkbox--stroke) {
  background-color: var(--gray-light) !important;
}
input:checked + .color-gray-faint.checkbox--stroke,
.color-gray-faint.checkbox--stroke.is-active,
input:checked + .color-gray-faint,
.color-gray-faint.is-active {
  color: var(--gray-light) !important;
}

input:checked + .bg-gray-light:not(.checkbox--stroke),
.bg-gray-light.is-active:not(.checkbox--stroke) {
  background-color: var(--gray) !important;
}
input:checked + .color-gray-light.checkbox--stroke,
.color-gray-light.checkbox--stroke.is-active,
input:checked + .color-gray-light,
.color-gray-light.is-active {
  color: var(--gray) !important;
}

input:checked + .bg-gray:not(.checkbox--stroke),
.bg-gray.is-active:not(.checkbox--stroke) {
  background-color: var(--gray-dark) !important;
}
input:checked + .color-gray.checkbox--stroke,
.color-gray.checkbox--stroke.is-active,
input:checked + .color-gray,
.color-gray.is-active {
  color: var(--gray-dark) !important;
}

input:checked + .bg-gray-dark:not(.checkbox--stroke),
.bg-gray-dark.is-active:not(.checkbox--stroke) {
  background-color: var(--black) !important;
}
input:checked + .color-gray-dark.checkbox--stroke,
.color-gray-dark.checkbox--stroke.is-active,
input:checked + .color-gray-dark,
.color-gray-dark.is-active {
  color: var(--black) !important;
}

input:checked + .bg-pink:not(.checkbox--stroke),
.bg-pink.is-active:not(.checkbox--stroke) {
  background-color: var(--pink-dark) !important;
}
input:checked + .color-pink.checkbox--stroke,
.color-pink.checkbox--stroke.is-active,
input:checked + .color-pink,
.color-pink.is-active {
  color: var(--pink-dark) !important;
}

input:checked + .bg-red:not(.checkbox--stroke),
.bg-red.is-active:not(.checkbox--stroke) {
  background-color: var(--red-dark) !important;
}
input:checked + .color-red.checkbox--stroke,
.color-red.checkbox--stroke.is-active,
input:checked + .color-red,
.color-red.is-active {
  color: var(--red-dark) !important;
}

input:checked + .bg-orange:not(.checkbox--stroke),
.bg-orange.is-active:not(.checkbox--stroke) {
  background-color: var(--orange-dark) !important;
}
input:checked + .color-orange.checkbox--stroke,
.color-orange.checkbox--stroke.is-active,
input:checked + .color-orange,
.color-orange.is-active {
  color: var(--orange-dark) !important;
}

input:checked + .bg-yellow:not(.checkbox--stroke),
.bg-yellow.is-active:not(.checkbox--stroke) {
  background-color: var(--yellow-dark) !important;
}
input:checked + .color-yellow.checkbox--stroke,
.color-yellow.checkbox--stroke.is-active,
input:checked + .color-yellow,
.color-yellow.is-active {
  color: var(--yellow-dark) !important;
}

input:checked + .bg-green:not(.checkbox--stroke),
.bg-green.is-active:not(.checkbox--stroke) {
  background-color: var(--green-dark) !important;
}
input:checked + .color-green.checkbox--stroke,
.color-green.checkbox--stroke.is-active,
input:checked + .color-green,
.color-green.is-active {
  color: var(--green-dark) !important;
}

input:checked + .bg-teal:not(.checkbox--stroke),
.bg-teal.is-active:not(.checkbox--stroke) {
  background-color: var(--teal-dark) !important;
}
input:checked + .color-teal.checkbox--stroke,
.color-teal.checkbox--stroke.is-active,
input:checked + .color-teal,
.color-teal.is-active {
  color: var(--teal-dark) !important;
}

input:checked + .bg-purple:not(.checkbox--stroke),
.bg-purple.is-active:not(.checkbox--stroke) {
  background-color: var(--purple-dark) !important;
}
input:checked + .color-purple.checkbox--stroke,
.color-purple.checkbox--stroke.is-active,
input:checked + .color-purple,
.color-purple.is-active {
  color: var(--purple-dark) !important;
}

input:checked + .bg-black:not(.checkbox--stroke),
.bg-black.is-active:not(.checkbox--stroke) {
  background-color: var(--black) !important;
}
input:checked + .color-black.checkbox--stroke,
.color-black.checkbox--stroke.is-active,
input:checked + .color-black,
.color-black.is-active {
  color: var(--black) !important;
}

/* Color variations for switches */
.switch.color-purple:hover {
  border-color: var(--purple-dark) !important;
}

/* make switch background dark purple when active */
.is-active.switch.color-purple,
input:checked + .switch.color-purple,
/* make dot dark purple on hover, if not active  */
input:not(:checked) + .switch.color-purple:hover::after,
:not(input) + .switch.color-purple:not(.is-active):hover::after,
/* use modifier class to make the dot dark purple on hover, if active  */
.is-active.switch--handle-purple::after,
input:checked + .switch--handle-purple::after {
  background-color: var(--purple-dark) !important;
}
