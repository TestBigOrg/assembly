/**
 * Extra rules that come in handy.
 *
 * @section Miscellaneous
*/

/**
 * Style a loading spinner.
 * On dark backgrounds, add the `loading--dark` modifier.
 * For a smaller spinner, add the `loading--s` modifier.
 *
 * @group
 * @memberof Miscellaneous
 * @example
 * <div class="loading"></div>
 * <div class="loading loading--s"></div>
 * <div class="loading loading--dark bg-gray-dark"></div>
*/
.loading { display: flex; }
.loading::after,
.loading::after {
  content: '';
  display: block;
  margin: auto;
  height: 36px;
  width: 36px;
  border-radius: 50%;
  animation: spin 0.8s infinite cubic-bezier(0.45, 0.05, 0.55, 0.95);
  border: var(--darken10) 3px solid;
  border-top-color: var(--gray-dark);
}

.loading--dark::after {
  border: var(--lighten10) 3px solid !important;
  border-top-color: var(--gray-faint) !important;
}

.loading--s::after {
  height: 18px !important;
  width: 18px !important;
}
/** @endgroup */

/**
 * Disable touch and click events on an element and
 * its children. Be aware that this rule does not disable keyboard events,
 * so a user can still tab to an element and press Return to trigger
 * its click event.
 *
 * @memberof Miscellaneous
 * @example
 * <div class='btn events-none'>You can't click this</div>
 */
.events-none {
  -webkit-touch-callout: none;
  pointer-events: none;
}

/**
 * Enable touch and click events on an element and
 * its children. Use to re-enable such events inside a parent with the `events-none` class.
 *
 * @memberof Miscellaneous
 * @example
 * <div class='events-none'><div class='events-all'>You can click this.</div></div>
 */
.events-all {
  -webkit-touch-callout: default;
  pointer-events: all;
}

/**
 * Disable text selection on an element and its children. Use only in cases where accidental
 * text selection causes user frustration.
 *
 * @memberof Miscellaneous
 * @example
 * <div class='select-none'>You can't select this.</div>
 */
.select-none {
  user-select: none;
}

/**
 * Enable text selection on an element and its children.
 * Use to re-enable selection inside a parent with the `select-none` class.
 *
 * @memberof Miscellaneous
 * @example
 * <div class='select-none'><div class='select-text'>You can select this.</div></div>
 */
.select-text {
  user-select: text;
}

/**
 * Disable an animated transition on elements like [`btn`](#Buttons) that have default transitions.
 *
 * @memberof Miscellaneous
 * @example
 * <div class='btn transition-none'>transition-none</div>
 */
.transition-none {
  transition: auto;
}

/**
 * Always show scrollbars.
 *
 * @memberof Miscellaneous
 * @example
 *   <div class='scroll-always'>Curabitur blandit tempus porttitor. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Etiam porta sem malesuada magna mollis euismod. Maecenas faucibus mollis interdum. Donec ullamcorper nulla non metus auctor fringilla. Nullam id dolor id nibh ultricies vehicula ut id elit.</div>
 */
.scroll-always {
  overflow: scroll !important;
}

/**
 * Display scrollbars if content flows beyond the edge of the element.
 *
 * @memberof Miscellaneous
 * @example
 *   <div class='h48 scroll-auto'>Curabitur blandit tempus porttitor. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Etiam porta sem malesuada magna mollis euismod. Maecenas faucibus mollis interdum. Donec ullamcorper nulla non metus auctor fringilla. Nullam id dolor id nibh ultricies vehicula ut id elit.</div>
 */
.scroll-auto {
  overflow: auto !important;
}

/**
 * Clip content if it reaches the edge of the element.
 *
 * @memberof Miscellaneous
 * @example
 *   <div class='h48 clip'>Curabitur blandit tempus porttitor. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Etiam porta sem malesuada magna mollis euismod. Maecenas faucibus mollis interdum. Donec ullamcorper nulla non metus auctor fringilla. Nullam id dolor id nibh ultricies vehicula ut id elit.</div>
 */
.clip {
  overflow: hidden !important;
}

/**
 * Apply Assembly's default focus outline when an element is focused.
 *
 * Inputs, selects, buttons, and links already handle focus states.
 * You'll only need to apply this class to other things that you make focusable
 * (e.g. by adding a `tabindex`). If you do not use this class on a focusable
 * element, that element will receive the browser's default focus outline.
 *
 * @memberof Miscellaneous
 * @example
 * <div tabindex='0' class='focusable inline-block bg-blue-light p6'>
 *   I am a div but focusable
 * </div>
 */
.focusable:focus {
  outline: 0 !important;
  box-shadow: var(--focus-shadow) !important;
}
